# https://leetcode.com/problems/word-search/?envType=study-plan-v2&envId=top-interview-150
# 79. Word Search

# VERSION: 1
# I HAVE TO MANAGE DIFFERENT POSSIBILITIES RECURSIVELY

# INPUT: mxn grid of chars board and a string word
# OUTPUT: return True if word exists in the grid

#The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

import numpy as np

def word_search(board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"):
	
	# matrix dimensions
	n, m = len(board), len(board[0]) 
	
	# reduced dimensionality
	board = np.ravel(board)
	
	neighbors = {}
	
	for i in range(len(board)):
		
		neighbors[i] = []
		
		# sx neighbor
		if i%m != 0:
			neighbors[i].append(i-1)
		
		# dx neighbor
		if i%m != m-1:
			neighbors[i].append(i+1)
	
		# over neighbor
		if i>=m:
			neighbors[i].append(i-m)

		# under neighbor
		if i<(n*m)-m:
			neighbors[i].append(i+m)
			
	
	possibilities = [i for i, j in enumerate(list(board)) if j == word[0]]
	
	for idx in possibilities:
		local_neighbors = neighbors.copy()
		board_pointer = idx
		
		constructed_word = f"{word[0]}"
		constructed_indexes = [idx]
		
		for word_letter in word[1:]:
			if word_letter not in [list(board)[num] for num in local_neighbors[board_pointer]]:
				break
			else:
				this_letter_possibilities = [i for i, j in enumerate(local_neighbors[board_pointer]) if board[j] == word_letter]
				poss = []
				for index in this_letter_possibilities:
					poss.append(local_neighbors[board_pointer][index])
				
				constructed_word += word_letter	
				new_board_pointer = local_neighbors[board_pointer][[list(board)[num] for num in local_neighbors[board_pointer]].index(word_letter)]
				constructed_indexes.append(new_board_pointer)
				local_neighbors[new_board_pointer].remove(board_pointer) 
				if constructed_word == word:
					print(f"Word founded: {word}")
					print(f"Indexes: {constructed_indexes}")
					return True
				
				board_pointer = new_board_pointer
				
		
				
if __name__ == "__main__":
	word_search()